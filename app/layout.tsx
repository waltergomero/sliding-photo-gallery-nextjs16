import type { Metadata } from 'next'

import AppWrapper from '@/components/AppWrapper'

import favicon from '@/assets/images/favicon.ico'
import { appDescription, appTitle } from '@/helpers'
import { ChildrenType } from '@/types'

// import 'flatpickr/dist/flatpickr.min.css'
// import 'jsvectormap/dist/css/jsvectormap.min.css'
// import 'simplebar-react/dist/simplebar.min.css'

import '@/assets/scss/app.scss'

import { Open_Sans, Roboto, Geist, Geist_Mono } from 'next/font/google'

const openSans = Open_Sans({
  subsets: ['latin'],
  weight: ['300', '400', '500', '600', '700', '800'],
  style: ['normal', 'italic'],
  variable: '--font-open-sans',
})

const roboto = Roboto({
  subsets: ['latin'],
  weight: ['100', '300', '400', '500', '700', '900'],
  style: ['normal', 'italic'],
  variable: '--font-roboto',
})

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});


export const metadata: Metadata = {
  title: {
    default: appTitle,
    template: '%s | ' + appTitle,
  },
  description: appDescription,
  icons: [favicon.src],
}

const RootLayout = ({ children }: ChildrenType) => {
  return (
    //<html lang="en" className={`${roboto.variable} ${openSans.variable}`}>
    <html lang='en' className={`${geistSans.variable} ${geistMono.variable}`}>
      <body>
        <AppWrapper>{children}</AppWrapper>
      </body>
    </html>
  )
}

export default RootLayout



// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";
// import '@/assets/scss/app.scss'

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body className={`${geistSans.variable} ${geistMono.variable}`}>
//         {children}
//       </body>
//     </html>
//   );
// }
